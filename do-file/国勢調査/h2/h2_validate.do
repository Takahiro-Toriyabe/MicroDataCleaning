/*-----------------------------------------------------------------------------
    <README>
    This do-file is generated from the python program provided
    in 'https://github.com/Takahiro-Toriyabe/MicroDataCleaning'.
        _const.do:    Import fixed-length data
        _var.do:      Put variable labels
        _val.do:      Put value labels
        _validate.do: Check if the data seems correctly imported
        rename.do:    Rename variable to harmonize several data

    WARNING:
        1. The generated do-files do not necessarily correct. If you find
           something wrong regarding the program or the resulting do-file(s),
           please report at the above GitHub web page.

        2. _validate.do checks if each variable has the values that it is
           supposed to have (only for categorical variables).

        3. rename.do is generated by finding a variable with a similar variable
           description and, if any, a similar variable name from the base data.
           So it is quite likely that some variables are renamed incorrectly.
           Please check and modify rename.do.

        4. Although value labels are put for each individual data, the labels
           are not put for the appended data, because the categories for each
           variable are very likely to be inconsistent across years.

        5. There is no file to make variable values consistent across different
           data.


    Source: 
    Date: 2019/04/12 17:05:44
-----------------------------------------------------------------------------*/


capture count if NENTUKI==.
if r(N)==_N {
    display as error "Only missing value: {bf:NENTUKI} (調査年月)"
}
capture assert inlist(NENTUKI, 199010, .)
if _rc!=0 {
    display as error "WARNING: {bf:NENTUKI} (調査年月) may have invalid values (Check layout sheet)"
}


capture count if KEN==.
if r(N)==_N {
    display as error "Only missing value: {bf:KEN} (都道府県)"
}


capture count if CITY==.
if r(N)==_N {
    display as error "Only missing value: {bf:CITY} (市区町村)"
}


capture count if SHUBAN==.
if r(N)==_N {
    display as error "Only missing value: {bf:SHUBAN} (主番号)"
}


capture count if KOUCHI==.
if r(N)==_N {
    display as error "Only missing value: {bf:KOUCHI} (後置番号)"
}
capture assert inlist(KOUCHI, 1, 2, 3, 4, 5, 6, 7, 8, 9, .)
if _rc!=0 {
    display as error "WARNING: {bf:KOUCHI} (後置番号) may have invalid values (Check layout sheet)"
}


capture count if BUNKATU==.
if r(N)==_N {
    display as error "Only missing value: {bf:BUNKATU} (分割区番号)"
}


capture count if DTKBN==.
if r(N)==_N {
    display as error "Only missing value: {bf:DTKBN} (データ区分)"
}


capture count if SETORG==.
if r(N)==_N {
    display as error "Only missing value: {bf:SETORG} (世帯番号オリジナルコード)"
}


capture count if SETINREN==.
if r(N)==_N {
    display as error "Only missing value: {bf:SETINREN} (世帯員番号)"
}


capture count if CHOURITSU==.
if r(N)==_N {
    display as error "Only missing value: {bf:CHOURITSU} (集計用乗率)"
}
capture assert inlist(CHOURITSU, 1, 2, 3, 4, 5, 6, 8, 9, 12, 16, 20, .)
if _rc!=0 {
    display as error "WARNING: {bf:CHOURITSU} (集計用乗率) may have invalid values (Check layout sheet)"
}


capture count if AZACODE==.
if r(N)==_N {
    display as error "Only missing value: {bf:AZACODE} (町字コード)"
}


capture count if TANIKUCODE==.
if r(N)==_N {
    display as error "Only missing value: {bf:TANIKUCODE} (基本単位区コード)"
}


capture count if ISKBN==.
if r(N)==_N {
    display as error "Only missing value: {bf:ISKBN} (一般・施設等の別)"
}
capture assert inlist(ISKBN, 1, 2, .)
if _rc!=0 {
    display as error "WARNING: {bf:ISKBN} (一般・施設等の別) may have invalid values (Check layout sheet)"
}


capture count if SETAI==.
if r(N)==_N {
    display as error "Only missing value: {bf:SETAI} (世帯の種類)"
}
capture assert inlist(SETAI, 1, 2, 3, 4, 5, 7, 8, 6, .)
if _rc!=0 {
    display as error "WARNING: {bf:SETAI} (世帯の種類) may have invalid values (Check layout sheet)"
}


capture count if TATE==.
if r(N)==_N {
    display as error "Only missing value: {bf:TATE} (建て方の種類)"
}
capture assert inlist(TATE, 1, 2, 3, 4, .)
if _rc!=0 {
    display as error "WARNING: {bf:TATE} (建て方の種類) may have invalid values (Check layout sheet)"
}


capture count if KAISU==.
if r(N)==_N {
    display as error "Only missing value: {bf:KAISU} (建物の階数)"
}
capture assert inlist(KAISU, 1, 2, 3, 4, .)
if _rc!=0 {
    display as error "WARNING: {bf:KAISU} (建物の階数) may have invalid values (Check layout sheet)"
}


capture count if JYUKYO==.
if r(N)==_N {
    display as error "Only missing value: {bf:JYUKYO} (住居の種類)"
}
capture assert inlist(JYUKYO, 1, 2, 3, 4, 5, 6, 7, 8, .)
if _rc!=0 {
    display as error "WARNING: {bf:JYUKYO} (住居の種類) may have invalid values (Check layout sheet)"
}


capture count if NOBETANI==.
if r(N)==_N {
    display as error "Only missing value: {bf:NOBETANI} (単位)"
}
capture assert inlist(NOBETANI, 1, 2, .)
if _rc!=0 {
    display as error "WARNING: {bf:NOBETANI} (単位) may have invalid values (Check layout sheet)"
}


capture count if NOBE==.
if r(N)==_N {
    display as error "Only missing value: {bf:NOBE} (延べ面積)"
}


capture count if NOBEAREA==.
if r(N)==_N {
    display as error "Only missing value: {bf:NOBEAREA} (延べ面積平方メートル換算済)"
}


capture count if SETJIN==.
if r(N)==_N {
    display as error "Only missing value: {bf:SETJIN} (世帯人員)"
}


capture count if TUZUKI==.
if r(N)==_N {
    display as error "Only missing value: {bf:TUZUKI} (世帯主との続き柄)"
}
capture assert inlist(TUZUKI, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, .)
if _rc!=0 {
    display as error "WARNING: {bf:TUZUKI} (世帯主との続き柄) may have invalid values (Check layout sheet)"
}


capture count if SEN==.
if r(N)==_N {
    display as error "Only missing value: {bf:SEN} (男女の別)"
}
capture assert inlist(SEN, 1, 2, .)
if _rc!=0 {
    display as error "WARNING: {bf:SEN} (男女の別) may have invalid values (Check layout sheet)"
}


capture count if GENGO==.
if r(N)==_N {
    display as error "Only missing value: {bf:GENGO} (元号)"
}
capture assert inlist(GENGO, 1, 2, 3, 4, .)
if _rc!=0 {
    display as error "WARNING: {bf:GENGO} (元号) may have invalid values (Check layout sheet)"
}


capture count if NEN==.
if r(N)==_N {
    display as error "Only missing value: {bf:NEN} (年)"
}


capture count if TUKI==.
if r(N)==_N {
    display as error "Only missing value: {bf:TUKI} (月区分)"
}
capture assert inlist(TUKI, 1, 2, 3, 4, .)
if _rc!=0 {
    display as error "WARNING: {bf:TUKI} (月区分) may have invalid values (Check layout sheet)"
}


capture count if NENREI==.
if r(N)==_N {
    display as error "Only missing value: {bf:NENREI} (各歳)"
}


capture count if HAIGU==.
if r(N)==_N {
    display as error "Only missing value: {bf:HAIGU} (配偶関係)"
}
capture assert inlist(HAIGU, 1, 2, 3, 4, .)
if _rc!=0 {
    display as error "WARNING: {bf:HAIGU} (配偶関係) may have invalid values (Check layout sheet)"
}


capture count if KOKUSEKI==.
if r(N)==_N {
    display as error "Only missing value: {bf:KOKUSEKI} (日本・外国の別)"
}
capture assert inlist(KOKUSEKI, 1, 2, .)
if _rc!=0 {
    display as error "WARNING: {bf:KOKUSEKI} (日本・外国の別) may have invalid values (Check layout sheet)"
}


capture count if ZENJ6==.
if r(N)==_N {
    display as error "Only missing value: {bf:ZENJ6} (6区分)"
}
capture assert inlist(ZENJ6, 1, 2, 3, 4, 5, 6, .)
if _rc!=0 {
    display as error "WARNING: {bf:ZENJ6} (6区分) may have invalid values (Check layout sheet)"
}


capture count if ZENJKEN==.
if r(N)==_N {
    display as error "Only missing value: {bf:ZENJKEN} (都道府県)"
}


capture count if ZENJCITY==.
if r(N)==_N {
    display as error "Only missing value: {bf:ZENJCITY} (市区町村)"
}


capture count if KYOIKU==.
if r(N)==_N {
    display as error "Only missing value: {bf:KYOIKU} (在学中・卒業・未就学別)"
}
capture assert inlist(KYOIKU, 1, 2, 3, .)
if _rc!=0 {
    display as error "WARNING: {bf:KYOIKU} (在学中・卒業・未就学別) may have invalid values (Check layout sheet)"
}


capture count if KYOKBN==.
if r(N)==_N {
    display as error "Only missing value: {bf:KYOKBN} (学校区分)"
}
capture assert inlist(KYOKBN, 1, 2, 3, 4, 5, 6, 7, .)
if _rc!=0 {
    display as error "WARNING: {bf:KYOKBN} (学校区分) may have invalid values (Check layout sheet)"
}


capture count if RODO8==.
if r(N)==_N {
    display as error "Only missing value: {bf:RODO8} (8区分)"
}
capture assert inlist(RODO8, 1, 2, 3, 4, 5, 6, 7, 8, .)
if _rc!=0 {
    display as error "WARNING: {bf:RODO8} (8区分) may have invalid values (Check layout sheet)"
}


capture count if JYU6A==.
if r(N)==_N {
    display as error "Only missing value: {bf:JYU6A} (常住地による従通)"
}
capture assert inlist(JYU6A, 1, 2, 3, 4, 5, 6, .)
if _rc!=0 {
    display as error "WARNING: {bf:JYU6A} (常住地による従通) may have invalid values (Check layout sheet)"
}


capture count if JYUKEN==.
if r(N)==_N {
    display as error "Only missing value: {bf:JYUKEN} (都道府県)"
}


capture count if JYUCITY==.
if r(N)==_N {
    display as error "Only missing value: {bf:JYUCITY} (市区町村)"
}


capture count if CHII6==.
if r(N)==_N {
    display as error "Only missing value: {bf:CHII6} (従業上の地位)"
}
capture assert inlist(CHII6, 1, 2, 3, 4, 5, 6, .)
if _rc!=0 {
    display as error "WARNING: {bf:CHII6} (従業上の地位) may have invalid values (Check layout sheet)"
}


capture count if SANDF==.
if r(N)==_N {
    display as error "Only missing value: {bf:SANDF} (オリジナルコード)"
}


capture count if SAND==.
if r(N)==_N {
    display as error "Only missing value: {bf:SAND} (集計用一連番号)"
}
capture assert inlist(SAND, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, .)
if _rc!=0 {
    display as error "WARNING: {bf:SAND} (集計用一連番号) may have invalid values (Check layout sheet)"
}


capture count if SANC==.
if r(N)==_N {
    display as error "Only missing value: {bf:SANC} (中分類集計用一連番号)"
}


capture count if SANSF==.
if r(N)==_N {
    display as error "Only missing value: {bf:SANSF} (オリジナルコード)"
}


capture count if SANS==.
if r(N)==_N {
    display as error "Only missing value: {bf:SANS} (小分類集計用一連番号)"
}


capture count if SHOD==.
if r(N)==_N {
    display as error "Only missing value: {bf:SHOD} (集計用一連番号)"
}
capture assert inlist(SHOD, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, .)
if _rc!=0 {
    display as error "WARNING: {bf:SHOD} (集計用一連番号) may have invalid values (Check layout sheet)"
}


capture count if SHOC==.
if r(N)==_N {
    display as error "Only missing value: {bf:SHOC} (中分類集計用一連番号)"
}


capture count if SHOSF==.
if r(N)==_N {
    display as error "Only missing value: {bf:SHOSF} (オリジナルコード)"
}


capture count if SHOS==.
if r(N)==_N {
    display as error "Only missing value: {bf:SHOS} (小分類集計用一連番号)"
}


