/*-----------------------------------------------------------------------------
    <README>
    This do-file is generated from the python program provided
    in 'https://github.com/Takahiro-Toriyabe/MicroDataCleaning'.
        _const.do:    Import fixed-length data
        _var.do:      Put variable labels
        _val.do:      Put value labels
        _validate.do: Check if the data seems correctly imported
        rename.do:    Rename variable to harmonize several data

    WARNING:
        1. The generated do-files do not necessarily correct. If you find
           something wrong regarding the program or the resulting do-file(s),
           please report at the above GitHub web page.

        2. _validate.do checks if each variable has the values that it is
           supposed to have (only for categorical variables).

        3. rename.do is generated by finding a variable with a similar variable
           description and, if any, a similar variable name from the base data.
           So it is quite likely that some variables are renamed incorrectly.
           Please check and modify rename.do.

        4. Although value labels are put for each individual data, the labels
           are not put for the appended data, because the categories for each
           variable are very likely to be inconsistent across years.

        5. There is no file to make variable values consistent across different
           data.


    Source: 
    Date: 2019/04/14 14:46:11
-----------------------------------------------------------------------------*/


capture count if CHONEN==.
if r(N)==_N {
    display as error "Only missing value: {bf:CHONEN} (調査年)"
}
capture assert inlist(CHONEN, 1985, .)
if _rc!=0 {
    display as error "WARNING: {bf:CHONEN} (調査年) may have invalid values (Check layout sheet)"
}


capture count if CHOTUKI==.
if r(N)==_N {
    display as error "Only missing value: {bf:CHOTUKI} (調査月)"
}
capture assert inlist(CHOTUKI, 10, .)
if _rc!=0 {
    display as error "WARNING: {bf:CHOTUKI} (調査月) may have invalid values (Check layout sheet)"
}


capture count if KEN==.
if r(N)==_N {
    display as error "Only missing value: {bf:KEN} (都道府県)"
}


capture count if CITY==.
if r(N)==_N {
    display as error "Only missing value: {bf:CITY} (市区町村)"
}


capture count if RITSU==.
if r(N)==_N {
    display as error "Only missing value: {bf:RITSU} (推計乗率)"
}
capture assert inlist(RITSU, 1, 2, 3, 4, 5, 6, 8, 10, .)
if _rc!=0 {
    display as error "WARNING: {bf:RITSU} (推計乗率) may have invalid values (Check layout sheet)"
}


capture count if TOKEIKU==.
if r(N)==_N {
    display as error "Only missing value: {bf:TOKEIKU} (統計区番号)"
}


capture count if SHUBAN==.
if r(N)==_N {
    display as error "Only missing value: {bf:SHUBAN} (主番号)"
}


capture count if KOUCHI==.
if r(N)==_N {
    display as error "Only missing value: {bf:KOUCHI} (後置番号)"
}
capture assert inlist(KOUCHI, 1, 2, 3, 4, 5, 6, 7, 8, 9, .)
if _rc!=0 {
    display as error "WARNING: {bf:KOUCHI} (後置番号) may have invalid values (Check layout sheet)"
}


capture count if BUNKATU==.
if r(N)==_N {
    display as error "Only missing value: {bf:BUNKATU} (分割(区)番号)"
}


capture count if BUNCTL==.
if r(N)==_N {
    display as error "Only missing value: {bf:BUNCTL} (調査区分割符号)"
}


capture count if AZA==.
if r(N)==_N {
    display as error "Only missing value: {bf:AZA} (町丁・字番号)"
}


capture count if DTKBN==.
if r(N)==_N {
    display as error "Only missing value: {bf:DTKBN} (データ区分)"
}


capture count if SETORG==.
if r(N)==_N {
    display as error "Only missing value: {bf:SETORG} (オリジナルコード)"
}


capture count if ISKBN==.
if r(N)==_N {
    display as error "Only missing value: {bf:ISKBN} (一般世帯と施設等の世帯の別)"
}
capture assert inlist(ISKBN, 1, 2, .)
if _rc!=0 {
    display as error "WARNING: {bf:ISKBN} (一般世帯と施設等の世帯の別) may have invalid values (Check layout sheet)"
}


capture count if FJKBN==.
if r(N)==_N {
    display as error "Only missing value: {bf:FJKBN} (普通世帯と準世帯の別)"
}
capture assert inlist(FJKBN, 1, 2, 3, 4, 5, 6, 7, 8, 9, .)
if _rc!=0 {
    display as error "WARNING: {bf:FJKBN} (普通世帯と準世帯の別) may have invalid values (Check layout sheet)"
}


capture count if JUNKBN==.
if r(N)==_N {
    display as error "Only missing value: {bf:JUNKBN} (準世帯の人員4区分)"
}
capture assert inlist(JUNKBN, 1, 2, 3, 4, .)
if _rc!=0 {
    display as error "WARNING: {bf:JUNKBN} (準世帯の人員4区分) may have invalid values (Check layout sheet)"
}


capture count if SETAI==.
if r(N)==_N {
    display as error "Only missing value: {bf:SETAI} (世帯の種類)"
}
capture assert inlist(SETAI, 1, 2, 3, 4, 5, 6, 7, 8, .)
if _rc!=0 {
    display as error "WARNING: {bf:SETAI} (世帯の種類) may have invalid values (Check layout sheet)"
}


capture count if TATE==.
if r(N)==_N {
    display as error "Only missing value: {bf:TATE} (建て方の種類)"
}
capture assert inlist(TATE, 1, 2, 3, 4, .)
if _rc!=0 {
    display as error "WARNING: {bf:TATE} (建て方の種類) may have invalid values (Check layout sheet)"
}


capture count if KAISU==.
if r(N)==_N {
    display as error "Only missing value: {bf:KAISU} (建物の階数)"
}
capture assert inlist(KAISU, 1, 2, 3, 4, .)
if _rc!=0 {
    display as error "WARNING: {bf:KAISU} (建物の階数) may have invalid values (Check layout sheet)"
}


capture count if JYUKYO==.
if r(N)==_N {
    display as error "Only missing value: {bf:JYUKYO} (住居の種類)"
}
capture assert inlist(JYUKYO, 1, 2, 3, 4, 5, 6, 7, 8, .)
if _rc!=0 {
    display as error "WARNING: {bf:JYUKYO} (住居の種類) may have invalid values (Check layout sheet)"
}


capture count if HEYA==.
if r(N)==_N {
    display as error "Only missing value: {bf:HEYA} (居住室数)"
}
capture assert inlist(HEYA, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, .)
if _rc!=0 {
    display as error "WARNING: {bf:HEYA} (居住室数) may have invalid values (Check layout sheet)"
}


capture count if TATAMI==.
if r(N)==_N {
    display as error "Only missing value: {bf:TATAMI} (畳数)"
}


capture count if SETJIN==.
if r(N)==_N {
    display as error "Only missing value: {bf:SETJIN} (世帯人員)"
}


capture count if SETINORG==.
if r(N)==_N {
    display as error "Only missing value: {bf:SETINORG} (調査票番号)"
}


capture count if SEX==.
if r(N)==_N {
    display as error "Only missing value: {bf:SEX} (男女の別)"
}
capture assert inlist(SEX, 1, 2, .)
if _rc!=0 {
    display as error "WARNING: {bf:SEX} (男女の別) may have invalid values (Check layout sheet)"
}


capture count if TUZUKI==.
if r(N)==_N {
    display as error "Only missing value: {bf:TUZUKI} (世帯主との続柄)"
}
capture assert inlist(TUZUKI, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, .)
if _rc!=0 {
    display as error "WARNING: {bf:TUZUKI} (世帯主との続柄) may have invalid values (Check layout sheet)"
}


capture count if GENGO==.
if r(N)==_N {
    display as error "Only missing value: {bf:GENGO} (元号)"
}
capture assert inlist(GENGO, 1, 2, 3, .)
if _rc!=0 {
    display as error "WARNING: {bf:GENGO} (元号) may have invalid values (Check layout sheet)"
}


capture count if NEN==.
if r(N)==_N {
    display as error "Only missing value: {bf:NEN} (年)"
}


capture count if TUKI==.
if r(N)==_N {
    display as error "Only missing value: {bf:TUKI} (月区分)"
}
capture assert inlist(TUKI, 1, 2, 3, 4, .)
if _rc!=0 {
    display as error "WARNING: {bf:TUKI} (月区分) may have invalid values (Check layout sheet)"
}


capture count if NENREI==.
if r(N)==_N {
    display as error "Only missing value: {bf:NENREI} (各歳)"
}


capture count if HAIGU==.
if r(N)==_N {
    display as error "Only missing value: {bf:HAIGU} (配偶関係)"
}
capture assert inlist(HAIGU, 1, 2, 3, 4, .)
if _rc!=0 {
    display as error "WARNING: {bf:HAIGU} (配偶関係) may have invalid values (Check layout sheet)"
}


capture count if KOKUSEKI==.
if r(N)==_N {
    display as error "Only missing value: {bf:KOKUSEKI} (日本・外国の別)"
}
capture assert inlist(KOKUSEKI, 1, 2, .)
if _rc!=0 {
    display as error "WARNING: {bf:KOKUSEKI} (日本・外国の別) may have invalid values (Check layout sheet)"
}


capture count if GAIKOKU==.
if r(N)==_N {
    display as error "Only missing value: {bf:GAIKOKU} (外国区分)"
}
capture assert inlist(GAIKOKU, 1, 2, 3, 4, .)
if _rc!=0 {
    display as error "WARNING: {bf:GAIKOKU} (外国区分) may have invalid values (Check layout sheet)"
}


capture count if RODO3==.
if r(N)==_N {
    display as error "Only missing value: {bf:RODO3} (3区分)"
}
capture assert inlist(RODO3, 1, 2, 3, .)
if _rc!=0 {
    display as error "WARNING: {bf:RODO3} (3区分) may have invalid values (Check layout sheet)"
}


capture count if RODO8==.
if r(N)==_N {
    display as error "Only missing value: {bf:RODO8} (8区分)"
}
capture assert inlist(RODO8, 1, 2, 3, 4, 5, 6, 7, 8, .)
if _rc!=0 {
    display as error "WARNING: {bf:RODO8} (8区分) may have invalid values (Check layout sheet)"
}


capture count if JYUTU3==.
if r(N)==_N {
    display as error "Only missing value: {bf:JYUTU3} (従通地3区分)"
}
capture assert inlist(JYUTU3, 1, 2, 3, .)
if _rc!=0 {
    display as error "WARNING: {bf:JYUTU3} (従通地3区分) may have invalid values (Check layout sheet)"
}


capture count if JYUTU6==.
if r(N)==_N {
    display as error "Only missing value: {bf:JYUTU6} (常住地による従業地・通学地6区分)"
}
capture assert inlist(JYUTU6, 1, 2, 3, 4, 5, 6, .)
if _rc!=0 {
    display as error "WARNING: {bf:JYUTU6} (常住地による従業地・通学地6区分) may have invalid values (Check layout sheet)"
}


capture count if JKEN==.
if r(N)==_N {
    display as error "Only missing value: {bf:JKEN} (都道府県)"
}


capture count if JCITY==.
if r(N)==_N {
    display as error "Only missing value: {bf:JCITY} (市区町村)"
}


capture count if CHII3==.
if r(N)==_N {
    display as error "Only missing value: {bf:CHII3} (3区分)"
}
capture assert inlist(CHII3, 1, 2, 3, .)
if _rc!=0 {
    display as error "WARNING: {bf:CHII3} (3区分) may have invalid values (Check layout sheet)"
}


capture count if CHII6==.
if r(N)==_N {
    display as error "Only missing value: {bf:CHII6} (6区分)"
}
capture assert inlist(CHII6, 1, 2, 3, 4, 5, 6, .)
if _rc!=0 {
    display as error "WARNING: {bf:CHII6} (6区分) may have invalid values (Check layout sheet)"
}


capture count if SAND==.
if r(N)==_N {
    display as error "Only missing value: {bf:SAND} (一連番号)"
}
capture assert inlist(SAND, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, .)
if _rc!=0 {
    display as error "WARNING: {bf:SAND} (一連番号) may have invalid values (Check layout sheet)"
}


capture count if SANC==.
if r(N)==_N {
    display as error "Only missing value: {bf:SANC} (中分類一連番号)"
}
capture assert inlist(SANC, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, .)
if _rc!=0 {
    display as error "WARNING: {bf:SANC} (中分類一連番号) may have invalid values (Check layout sheet)"
}


capture count if SANS==.
if r(N)==_N {
    display as error "Only missing value: {bf:SANS} (一連番号)"
}


capture count if SHOD==.
if r(N)==_N {
    display as error "Only missing value: {bf:SHOD} (一連番号)"
}
capture assert inlist(SHOD, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, .)
if _rc!=0 {
    display as error "WARNING: {bf:SHOD} (一連番号) may have invalid values (Check layout sheet)"
}


capture count if SHOC==.
if r(N)==_N {
    display as error "Only missing value: {bf:SHOC} (中分類一連番号)"
}
capture assert inlist(SHOC, 1, 2, 3, 4, 5, 6, 7, 8, 9, .)
if _rc!=0 {
    display as error "WARNING: {bf:SHOC} (中分類一連番号) may have invalid values (Check layout sheet)"
}


capture count if SHOS==.
if r(N)==_N {
    display as error "Only missing value: {bf:SHOS} (一連番号)"
}


