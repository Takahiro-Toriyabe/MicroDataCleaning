/*-----------------------------------------------------------------------------
    <README>
    This do-file is generated from the python program provided
    in 'https://github.com/Takahiro-Toriyabe/MicroDataCleaning'.
        _const.do:    Import fixed-length data
        _var.do:      Put variable labels
        _val.do:      Put value labels
        _validate.do: Check if the data seems correctly imported
        rename.do:    Rename variable to harmonize several data

    WARNING:
        1. The generated do-files do not necessarily correct. If you find
           something wrong regarding the program or the resulting do-file(s),
           please report at the above GitHub web page.

        2. _validate.do checks if each variable has the values that it is
           supposed to have (only for categorical variables).

        3. rename.do is generated by finding a variable with a similar variable
           description and, if any, a similar variable name from the base data.
           So it is quite likely that some variables are renamed incorrectly.
           Please check and modify rename.do.

        4. Although value labels are put for each individual data, the labels
           are not put for the appended data, because the categories for each
           variable are very likely to be inconsistent across years.

        5. There is no file to make variable values consistent across different
           data.


    Source: 
    Date: 2019/04/14 14:46:11
-----------------------------------------------------------------------------*/


capture count if YEAR==.
if r(N)==_N {
    display as error "Only missing value: {bf:YEAR} (調査年)"
}
capture assert inlist(YEAR, 1980, .)
if _rc!=0 {
    display as error "WARNING: {bf:YEAR} (調査年) may have invalid values (Check layout sheet)"
}


capture count if MONTH==.
if r(N)==_N {
    display as error "Only missing value: {bf:MONTH} (調査月)"
}
capture assert inlist(MONTH, 10, .)
if _rc!=0 {
    display as error "WARNING: {bf:MONTH} (調査月) may have invalid values (Check layout sheet)"
}


capture count if KEN==.
if r(N)==_N {
    display as error "Only missing value: {bf:KEN} (都道府県)"
}


capture count if CITY==.
if r(N)==_N {
    display as error "Only missing value: {bf:CITY} (市区町村)"
}


capture count if var1==.
if r(N)==_N {
    display as error "Only missing value: {bf:var1} (推計乗率)"
}


capture count if TOKEKU==.
if r(N)==_N {
    display as error "Only missing value: {bf:TOKEKU} (統計区番号)"
}


capture count if ZENCHI==.
if r(N)==_N {
    display as error "Only missing value: {bf:ZENCHI} (前置番号)"
}


capture count if SHUBAN==.
if r(N)==_N {
    display as error "Only missing value: {bf:SHUBAN} (主番号)"
}


capture count if KOHCHI==.
if r(N)==_N {
    display as error "Only missing value: {bf:KOHCHI} (後置番号)"
}
capture assert inlist(KOHCHI, 1, 2, 3, 4, 5, 6, 7, 8, 9, .)
if _rc!=0 {
    display as error "WARNING: {bf:KOHCHI} (後置番号) may have invalid values (Check layout sheet)"
}


capture count if BUNKA==.
if r(N)==_N {
    display as error "Only missing value: {bf:BUNKA} (分割(区)番号)"
}


capture count if CHOCTL==.
if r(N)==_N {
    display as error "Only missing value: {bf:CHOCTL} (調査区分割符号)"
}


capture count if AZA==.
if r(N)==_N {
    display as error "Only missing value: {bf:AZA} (町丁・字番号)"
}


capture count if DTKBN==.
if r(N)==_N {
    display as error "Only missing value: {bf:DTKBN} (データ区分)"
}


capture count if SETAIO==.
if r(N)==_N {
    display as error "Only missing value: {bf:SETAIO} (オリジナルコード)"
}


capture count if SKBNFJ==.
if r(N)==_N {
    display as error "Only missing value: {bf:SKBNFJ} (普通世帯・準世帯の別)"
}
capture assert inlist(SKBNFJ, 1, 2, 3, 4, 5, .)
if _rc!=0 {
    display as error "WARNING: {bf:SKBNFJ} (普通世帯・準世帯の別) may have invalid values (Check layout sheet)"
}


capture count if SKBNIS==.
if r(N)==_N {
    display as error "Only missing value: {bf:SKBNIS} (一般世帯・施設等の世帯の別)"
}
capture assert inlist(SKBNIS, 1, 2, .)
if _rc!=0 {
    display as error "WARNING: {bf:SKBNIS} (一般世帯・施設等の世帯の別) may have invalid values (Check layout sheet)"
}


capture count if SKIND==.
if r(N)==_N {
    display as error "Only missing value: {bf:SKIND} (世帯の種類(8区分))"
}
capture assert inlist(SKIND, 1, 2, 3, 4, 5, 6, 7, 8, .)
if _rc!=0 {
    display as error "WARNING: {bf:SKIND} (世帯の種類(8区分)) may have invalid values (Check layout sheet)"
}


capture count if TATEKA==.
if r(N)==_N {
    display as error "Only missing value: {bf:TATEKA} (建て方の種類)"
}
capture assert inlist(TATEKA, 1, 2, 3, 4, .)
if _rc!=0 {
    display as error "WARNING: {bf:TATEKA} (建て方の種類) may have invalid values (Check layout sheet)"
}


capture count if KAISU==.
if r(N)==_N {
    display as error "Only missing value: {bf:KAISU} (建て物の階数)"
}
capture assert inlist(KAISU, 1, 2, 3, 4, .)
if _rc!=0 {
    display as error "WARNING: {bf:KAISU} (建て物の階数) may have invalid values (Check layout sheet)"
}


capture count if JYUKYO==.
if r(N)==_N {
    display as error "Only missing value: {bf:JYUKYO} (住居の種類)"
}
capture assert inlist(JYUKYO, 1, 2, 3, 4, 5, 6, 7, 8, .)
if _rc!=0 {
    display as error "WARNING: {bf:JYUKYO} (住居の種類) may have invalid values (Check layout sheet)"
}


capture count if HEYA==.
if r(N)==_N {
    display as error "Only missing value: {bf:HEYA} (室数)"
}
capture assert inlist(HEYA, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, .)
if _rc!=0 {
    display as error "WARNING: {bf:HEYA} (室数) may have invalid values (Check layout sheet)"
}


capture count if TATAMI==.
if r(N)==_N {
    display as error "Only missing value: {bf:TATAMI} (畳数)"
}


capture count if MNYOMO==.
if r(N)==_N {
    display as error "Only missing value: {bf:MNYOMO} (主な収入の種類)"
}
capture assert inlist(MNYOMO, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, .)
if _rc!=0 {
    display as error "WARNING: {bf:MNYOMO} (主な収入の種類) may have invalid values (Check layout sheet)"
}


capture count if MNYJYU1==.
if r(N)==_N {
    display as error "Only missing value: {bf:MNYJYU1} (賃金・給料)"
}
capture assert inlist(MNYJYU1, 1, 0, .)
if _rc!=0 {
    display as error "WARNING: {bf:MNYJYU1} (賃金・給料) may have invalid values (Check layout sheet)"
}


capture count if MNYJYU2==.
if r(N)==_N {
    display as error "Only missing value: {bf:MNYJYU2} (農業収入)"
}
capture assert inlist(MNYJYU2, 1, 0, .)
if _rc!=0 {
    display as error "WARNING: {bf:MNYJYU2} (農業収入) may have invalid values (Check layout sheet)"
}


capture count if MNYJYU3==.
if r(N)==_N {
    display as error "Only missing value: {bf:MNYJYU3} (農業以外の事業収入)"
}
capture assert inlist(MNYJYU3, 1, 0, .)
if _rc!=0 {
    display as error "WARNING: {bf:MNYJYU3} (農業以外の事業収入) may have invalid values (Check layout sheet)"
}


capture count if MNYJYU4==.
if r(N)==_N {
    display as error "Only missing value: {bf:MNYJYU4} (内職収入)"
}
capture assert inlist(MNYJYU4, 1, 0, .)
if _rc!=0 {
    display as error "WARNING: {bf:MNYJYU4} (内職収入) may have invalid values (Check layout sheet)"
}


capture count if MNYJYU5==.
if r(N)==_N {
    display as error "Only missing value: {bf:MNYJYU5} (家賃・地代)"
}
capture assert inlist(MNYJYU5, 1, 0, .)
if _rc!=0 {
    display as error "WARNING: {bf:MNYJYU5} (家賃・地代) may have invalid values (Check layout sheet)"
}


capture count if MNYJYU6==.
if r(N)==_N {
    display as error "Only missing value: {bf:MNYJYU6} (利子・配当)"
}
capture assert inlist(MNYJYU6, 1, 0, .)
if _rc!=0 {
    display as error "WARNING: {bf:MNYJYU6} (利子・配当) may have invalid values (Check layout sheet)"
}


capture count if MNYJYU7==.
if r(N)==_N {
    display as error "Only missing value: {bf:MNYJYU7} (恩給・年金)"
}
capture assert inlist(MNYJYU7, 1, 0, .)
if _rc!=0 {
    display as error "WARNING: {bf:MNYJYU7} (恩給・年金) may have invalid values (Check layout sheet)"
}


capture count if MNYJYU8==.
if r(N)==_N {
    display as error "Only missing value: {bf:MNYJYU8} (雇用保険)"
}
capture assert inlist(MNYJYU8, 1, 0, .)
if _rc!=0 {
    display as error "WARNING: {bf:MNYJYU8} (雇用保険) may have invalid values (Check layout sheet)"
}


capture count if MNYJYU9==.
if r(N)==_N {
    display as error "Only missing value: {bf:MNYJYU9} (生活保護)"
}
capture assert inlist(MNYJYU9, 1, 0, .)
if _rc!=0 {
    display as error "WARNING: {bf:MNYJYU9} (生活保護) may have invalid values (Check layout sheet)"
}


capture count if MNYJYU10==.
if r(N)==_N {
    display as error "Only missing value: {bf:MNYJYU10} (仕送り)"
}
capture assert inlist(MNYJYU10, 1, 0, .)
if _rc!=0 {
    display as error "WARNING: {bf:MNYJYU10} (仕送り) may have invalid values (Check layout sheet)"
}


capture count if MNYJYU11==.
if r(N)==_N {
    display as error "Only missing value: {bf:MNYJYU11} (その他の収入)"
}
capture assert inlist(MNYJYU11, 1, 0, .)
if _rc!=0 {
    display as error "WARNING: {bf:MNYJYU11} (その他の収入) may have invalid values (Check layout sheet)"
}


capture count if MNY14==.
if r(N)==_N {
    display as error "Only missing value: {bf:MNY14} (14区分)"
}
capture assert inlist(MNY14, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, .)
if _rc!=0 {
    display as error "WARNING: {bf:MNY14} (14区分) may have invalid values (Check layout sheet)"
}


capture count if SETJIN==.
if r(N)==_N {
    display as error "Only missing value: {bf:SETJIN} (世帯人員)"
}


capture count if SETINNO==.
if r(N)==_N {
    display as error "Only missing value: {bf:SETINNO} (世帯員番号)"
}


capture count if TUZUKI==.
if r(N)==_N {
    display as error "Only missing value: {bf:TUZUKI} (世帯主との続き柄)"
}
capture assert inlist(TUZUKI, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, .)
if _rc!=0 {
    display as error "WARNING: {bf:TUZUKI} (世帯主との続き柄) may have invalid values (Check layout sheet)"
}


capture count if SEX==.
if r(N)==_N {
    display as error "Only missing value: {bf:SEX} (男女の別)"
}
capture assert inlist(SEX, 1, 2, .)
if _rc!=0 {
    display as error "WARNING: {bf:SEX} (男女の別) may have invalid values (Check layout sheet)"
}


capture count if NENGO==.
if r(N)==_N {
    display as error "Only missing value: {bf:NENGO} (元号)"
}
capture assert inlist(NENGO, 1, 2, 3, .)
if _rc!=0 {
    display as error "WARNING: {bf:NENGO} (元号) may have invalid values (Check layout sheet)"
}


capture count if NENSU==.
if r(N)==_N {
    display as error "Only missing value: {bf:NENSU} (年)"
}


capture count if TUKIKBN==.
if r(N)==_N {
    display as error "Only missing value: {bf:TUKIKBN} (月区分)"
}
capture assert inlist(TUKIKBN, 1, 2, 3, 4, .)
if _rc!=0 {
    display as error "WARNING: {bf:TUKIKBN} (月区分) may have invalid values (Check layout sheet)"
}


capture count if AGE==.
if r(N)==_N {
    display as error "Only missing value: {bf:AGE} (各歳)"
}


capture count if HAIGU==.
if r(N)==_N {
    display as error "Only missing value: {bf:HAIGU} (配偶関係)"
}
capture assert inlist(HAIGU, 1, 2, 3, 4, .)
if _rc!=0 {
    display as error "WARNING: {bf:HAIGU} (配偶関係) may have invalid values (Check layout sheet)"
}


capture count if KOKUSEKI==.
if r(N)==_N {
    display as error "Only missing value: {bf:KOKUSEKI} (日本・外国の別)"
}
capture assert inlist(KOKUSEKI, 1, 2, .)
if _rc!=0 {
    display as error "WARNING: {bf:KOKUSEKI} (日本・外国の別) may have invalid values (Check layout sheet)"
}


capture count if GAIKOKU==.
if r(N)==_N {
    display as error "Only missing value: {bf:GAIKOKU} (外国区分)"
}
capture assert inlist(GAIKOKU, 1, 2, 3, 4, .)
if _rc!=0 {
    display as error "WARNING: {bf:GAIKOKU} (外国区分) may have invalid values (Check layout sheet)"
}


capture count if NYUKYO==.
if r(N)==_N {
    display as error "Only missing value: {bf:NYUKYO} (入居の時期)"
}
capture assert inlist(NYUKYO, 1, 2, 3, 4, 5, 6, .)
if _rc!=0 {
    display as error "WARNING: {bf:NYUKYO} (入居の時期) may have invalid values (Check layout sheet)"
}


capture count if ZENJYU3==.
if r(N)==_N {
    display as error "Only missing value: {bf:ZENJYU3} (3区分)"
}
capture assert inlist(ZENJYU3, 1, 2, 3, .)
if _rc!=0 {
    display as error "WARNING: {bf:ZENJYU3} (3区分) may have invalid values (Check layout sheet)"
}


capture count if ZENJYU6==.
if r(N)==_N {
    display as error "Only missing value: {bf:ZENJYU6} (6区分)"
}
capture assert inlist(ZENJYU6, 1, 2, 3, 4, 5, 6, .)
if _rc!=0 {
    display as error "WARNING: {bf:ZENJYU6} (6区分) may have invalid values (Check layout sheet)"
}


capture count if ZENKEN==.
if r(N)==_N {
    display as error "Only missing value: {bf:ZENKEN} (都道府県)"
}


capture count if ZENCTY==.
if r(N)==_N {
    display as error "Only missing value: {bf:ZENCTY} (市区町村)"
}


capture count if GAKU==.
if r(N)==_N {
    display as error "Only missing value: {bf:GAKU} (在学中・卒業・未就学の別)"
}
capture assert inlist(GAKU, 1, 2, 3, .)
if _rc!=0 {
    display as error "WARNING: {bf:GAKU} (在学中・卒業・未就学の別) may have invalid values (Check layout sheet)"
}


capture count if GAKKO==.
if r(N)==_N {
    display as error "Only missing value: {bf:GAKKO} (学校区分)"
}
capture assert inlist(GAKKO, 1, 2, 3, 4, 5, 6, 7, 8, .)
if _rc!=0 {
    display as error "WARNING: {bf:GAKKO} (学校区分) may have invalid values (Check layout sheet)"
}


capture count if RODO3==.
if r(N)==_N {
    display as error "Only missing value: {bf:RODO3} (3区分)"
}
capture assert inlist(RODO3, 1, 2, 3, .)
if _rc!=0 {
    display as error "WARNING: {bf:RODO3} (3区分) may have invalid values (Check layout sheet)"
}


capture count if RODO8==.
if r(N)==_N {
    display as error "Only missing value: {bf:RODO8} (8区分)"
}
capture assert inlist(RODO8, 1, 2, 3, 4, 5, 6, 7, 8, .)
if _rc!=0 {
    display as error "WARNING: {bf:RODO8} (8区分) may have invalid values (Check layout sheet)"
}


capture count if JYTUKBN3==.
if r(N)==_N {
    display as error "Only missing value: {bf:JYTUKBN3} (3区分)"
}
capture assert inlist(JYTUKBN3, 1, 2, 3, .)
if _rc!=0 {
    display as error "WARNING: {bf:JYTUKBN3} (3区分) may have invalid values (Check layout sheet)"
}


capture count if JYTUKBN6==.
if r(N)==_N {
    display as error "Only missing value: {bf:JYTUKBN6} (常住地による従業地・通学地区分)"
}
capture assert inlist(JYTUKBN6, 1, 2, 3, 4, 5, 6, .)
if _rc!=0 {
    display as error "WARNING: {bf:JYTUKBN6} (常住地による従業地・通学地区分) may have invalid values (Check layout sheet)"
}


capture count if JYTUKEN==.
if r(N)==_N {
    display as error "Only missing value: {bf:JYTUKEN} (都道府県)"
}


capture count if JYTUCTY==.
if r(N)==_N {
    display as error "Only missing value: {bf:JYTUCTY} (市区町村)"
}


capture count if RIYO10==.
if r(N)==_N {
    display as error "Only missing value: {bf:RIYO10} (徒歩だけ)"
}
capture assert inlist(RIYO10, 0, 1, .)
if _rc!=0 {
    display as error "WARNING: {bf:RIYO10} (徒歩だけ) may have invalid values (Check layout sheet)"
}


capture count if RIYO10==.
if r(N)==_N {
    display as error "Only missing value: {bf:RIYO10} (国鉄)"
}
capture assert inlist(RIYO10, 0, 1, .)
if _rc!=0 {
    display as error "WARNING: {bf:RIYO10} (国鉄) may have invalid values (Check layout sheet)"
}


capture count if RIYO10==.
if r(N)==_N {
    display as error "Only missing value: {bf:RIYO10} (国鉄以外の鉄道・電車)"
}
capture assert inlist(RIYO10, 0, 1, .)
if _rc!=0 {
    display as error "WARNING: {bf:RIYO10} (国鉄以外の鉄道・電車) may have invalid values (Check layout sheet)"
}


capture count if RIYO10==.
if r(N)==_N {
    display as error "Only missing value: {bf:RIYO10} (乗合バス)"
}
capture assert inlist(RIYO10, 0, 1, .)
if _rc!=0 {
    display as error "WARNING: {bf:RIYO10} (乗合バス) may have invalid values (Check layout sheet)"
}


capture count if RIYO10==.
if r(N)==_N {
    display as error "Only missing value: {bf:RIYO10} (勤め先・学校のバス)"
}
capture assert inlist(RIYO10, 0, 1, .)
if _rc!=0 {
    display as error "WARNING: {bf:RIYO10} (勤め先・学校のバス) may have invalid values (Check layout sheet)"
}


capture count if RIYO10==.
if r(N)==_N {
    display as error "Only missing value: {bf:RIYO10} (自家用車)"
}
capture assert inlist(RIYO10, 0, 1, .)
if _rc!=0 {
    display as error "WARNING: {bf:RIYO10} (自家用車) may have invalid values (Check layout sheet)"
}


capture count if RIYO10==.
if r(N)==_N {
    display as error "Only missing value: {bf:RIYO10} (ハイヤー・タクシー)"
}
capture assert inlist(RIYO10, 0, 1, .)
if _rc!=0 {
    display as error "WARNING: {bf:RIYO10} (ハイヤー・タクシー) may have invalid values (Check layout sheet)"
}


capture count if RIYO10==.
if r(N)==_N {
    display as error "Only missing value: {bf:RIYO10} (オートバイ)"
}
capture assert inlist(RIYO10, 0, 1, .)
if _rc!=0 {
    display as error "WARNING: {bf:RIYO10} (オートバイ) may have invalid values (Check layout sheet)"
}


capture count if RIYO10==.
if r(N)==_N {
    display as error "Only missing value: {bf:RIYO10} (自転車)"
}
capture assert inlist(RIYO10, 0, 1, .)
if _rc!=0 {
    display as error "WARNING: {bf:RIYO10} (自転車) may have invalid values (Check layout sheet)"
}


capture count if RIYO10==.
if r(N)==_N {
    display as error "Only missing value: {bf:RIYO10} (その他)"
}
capture assert inlist(RIYO10, 0, 1, .)
if _rc!=0 {
    display as error "WARNING: {bf:RIYO10} (その他) may have invalid values (Check layout sheet)"
}


capture count if RIYO14==.
if r(N)==_N {
    display as error "Only missing value: {bf:RIYO14} (14区分)"
}
capture assert inlist(RIYO14, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, .)
if _rc!=0 {
    display as error "WARNING: {bf:RIYO14} (14区分) may have invalid values (Check layout sheet)"
}


capture count if RIYO41==.
if r(N)==_N {
    display as error "Only missing value: {bf:RIYO41} (41区分)"
}
capture assert inlist(RIYO41, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, .)
if _rc!=0 {
    display as error "WARNING: {bf:RIYO41} (41区分) may have invalid values (Check layout sheet)"
}


capture count if CHII3==.
if r(N)==_N {
    display as error "Only missing value: {bf:CHII3} (3区分)"
}
capture assert inlist(CHII3, 1, 2, 3, .)
if _rc!=0 {
    display as error "WARNING: {bf:CHII3} (3区分) may have invalid values (Check layout sheet)"
}


capture count if CHII6==.
if r(N)==_N {
    display as error "Only missing value: {bf:CHII6} (6区分)"
}
capture assert inlist(CHII6, 1, 2, 3, 4, 5, 6, .)
if _rc!=0 {
    display as error "WARNING: {bf:CHII6} (6区分) may have invalid values (Check layout sheet)"
}


capture count if SANDF==.
if r(N)==_N {
    display as error "Only missing value: {bf:SANDF} (チェック済コード)"
}


capture count if SANC==.
if r(N)==_N {
    display as error "Only missing value: {bf:SANC} (中分類)"
}


capture count if SANSF==.
if r(N)==_N {
    display as error "Only missing value: {bf:SANSF} (チェック済コード)"
}


capture count if SHODF==.
if r(N)==_N {
    display as error "Only missing value: {bf:SHODF} (チェック済コード)"
}


capture count if SHOC==.
if r(N)==_N {
    display as error "Only missing value: {bf:SHOC} (中分類)"
}


capture count if SHOSF==.
if r(N)==_N {
    display as error "Only missing value: {bf:SHOSF} (チェック済コード)"
}


