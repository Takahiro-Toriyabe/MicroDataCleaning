/*-----------------------------------------------------------------------------
    <README>
    This do-file is generated from the python program provided
    in 'https://github.com/Takahiro-Toriyabe/MicroDataCleaning'.
        _const.do:    Import fixed-length data
        _var.do:      Put variable labels
        _val.do:      Put value labels
        _validate.do: Check if the data seems correctly imported
        rename.do:    Rename variable to harmonize several data

    WARNING:
        1. The generated do-files do not necessarily correct. If you find
           something wrong regarding the program or the resulting do-file(s),
           please report at the above GitHub web page.

        2. _validate.do checks if each variable has the values that it is
           supposed to have (only for categorical variables).

        3. rename.do is generated by finding a variable with a similar variable
           description and, if any, a similar variable name from the base data.
           So it is quite likely that some variables are renamed incorrectly.
           Please check and modify rename.do.

        4. Although value labels are put for each individual data, the labels
           are not put for the appended data, because the categories for each
           variable are very likely to be inconsistent across years.

        5. There is no file to make variable values consistent across different
           data.


    Source: 
    Date: 2019/04/12 17:05:43
-----------------------------------------------------------------------------*/


capture count if DTKBN==.
if r(N)==_N {
    display as error "Only missing value: {bf:DTKBN} (データ区分)"
}


capture count if NENTSUKI==.
if r(N)==_N {
    display as error "Only missing value: {bf:NENTSUKI} (調査年月)"
}
capture assert inlist(NENTSUKI, 201510, .)
if _rc!=0 {
    display as error "WARNING: {bf:NENTSUKI} (調査年月) may have invalid values (Check layout sheet)"
}


capture count if KEN==.
if r(N)==_N {
    display as error "Only missing value: {bf:KEN} (都道府県)"
}
capture assert inlist(KEN, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, .)
if _rc!=0 {
    display as error "WARNING: {bf:KEN} (都道府県) may have invalid values (Check layout sheet)"
}


capture count if CITY==.
if r(N)==_N {
    display as error "Only missing value: {bf:CITY} (市区町村)"
}


capture count if SHUBAN==.
if r(N)==_N {
    display as error "Only missing value: {bf:SHUBAN} (主番号)"
}


capture count if KOCHI==.
if r(N)==_N {
    display as error "Only missing value: {bf:KOCHI} (後置番号)"
}
capture assert inlist(KOCHI, 1, 2, 3, 4, 5, 6, 7, 8, 9, .)
if _rc!=0 {
    display as error "WARNING: {bf:KOCHI} (後置番号) may have invalid values (Check layout sheet)"
}


capture count if TANI==.
if r(N)==_N {
    display as error "Only missing value: {bf:TANI} (単位番号)"
}


capture count if SETAI==.
if r(N)==_N {
    display as error "Only missing value: {bf:SETAI} (世帯番号)"
}


capture count if SETNINME==.
if r(N)==_N {
    display as error "Only missing value: {bf:SETNINME} (世帯員番号)"
}


capture count if AZACODE==.
if r(N)==_N {
    display as error "Only missing value: {bf:AZACODE} (町字コード)"
}


capture count if TANIKUCODE==.
if r(N)==_N {
    display as error "Only missing value: {bf:TANIKUCODE} (基本単位区コード)"
}


capture count if SENKEI_A==.
if r(N)==_N {
    display as error "Only missing value: {bf:SENKEI_A} (線形推定用乗率A(調査区内の当該世帯の抽出率の逆数))"
}


capture count if SENKEI_B==.
if r(N)==_N {
    display as error "Only missing value: {bf:SENKEI_B} (線形推定用乗率B(集計単位の市区町村内の当該調査区の抽出率の逆数))"
}


capture count if SENKEI_AB==.
if r(N)==_N {
    display as error "Only missing value: {bf:SENKEI_AB} (線形推定用乗率(線形推定用乗率A*線形推定用乗率B))"
}


capture count if JOSU==.
if r(N)==_N {
    display as error "Only missing value: {bf:JOSU} (乗数(集計用乗率/線形推定用乗率))"
}


capture count if JORITSU==.
if r(N)==_N {
    display as error "Only missing value: {bf:JORITSU} (集計用乗率)"
}


capture count if KC_5_GENGO==.
if r(N)==_N {
    display as error "Only missing value: {bf:KC_5_GENGO} (元号・西暦)"
}
capture assert inlist(KC_5_GENGO, 1, 2, 3, 4, 5, .)
if _rc!=0 {
    display as error "WARNING: {bf:KC_5_GENGO} (元号・西暦) may have invalid values (Check layout sheet)"
}


capture count if KC_5_NEN==.
if r(N)==_N {
    display as error "Only missing value: {bf:KC_5_NEN} (年)"
}


capture count if KC_5_TSUKI==.
if r(N)==_N {
    display as error "Only missing value: {bf:KC_5_TSUKI} (月)"
}


capture count if SKIND==.
if r(N)==_N {
    display as error "Only missing value: {bf:SKIND} (世帯の種類)"
}
capture assert inlist(SKIND, 1, 2, 3, 4, 5, 6, 7, 8, .)
if _rc!=0 {
    display as error "WARNING: {bf:SKIND} (世帯の種類) may have invalid values (Check layout sheet)"
}


capture count if ISKBN==.
if r(N)==_N {
    display as error "Only missing value: {bf:ISKBN} (一般・施設等の別)"
}
capture assert inlist(ISKBN, 1, 2, .)
if _rc!=0 {
    display as error "WARNING: {bf:ISKBN} (一般・施設等の別) may have invalid values (Check layout sheet)"
}


capture count if TATEKIND==.
if r(N)==_N {
    display as error "Only missing value: {bf:TATEKIND} (建て方の種類)"
}
capture assert inlist(TATEKIND, 1, 2, 3, 4, .)
if _rc!=0 {
    display as error "WARNING: {bf:TATEKIND} (建て方の種類) may have invalid values (Check layout sheet)"
}


capture count if TATEKAISU==.
if r(N)==_N {
    display as error "Only missing value: {bf:TATEKAISU} (建物の階数)"
}


capture count if LIVEKAISU==.
if r(N)==_N {
    display as error "Only missing value: {bf:LIVEKAISU} (住んでいる階)"
}


capture count if JYUKYO8==.
if r(N)==_N {
    display as error "Only missing value: {bf:JYUKYO8} (8区分)"
}
capture assert inlist(JYUKYO8, 1, 2, 3, 4, 5, 6, 7, 8, .)
if _rc!=0 {
    display as error "WARNING: {bf:JYUKYO8} (8区分) may have invalid values (Check layout sheet)"
}


capture count if SETJIN==.
if r(N)==_N {
    display as error "Only missing value: {bf:SETJIN} (総数)"
}


capture count if TSUZUKI==.
if r(N)==_N {
    display as error "Only missing value: {bf:TSUZUKI} (世帯主との続柄12区分)"
}
capture assert inlist(TSUZUKI, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, .)
if _rc!=0 {
    display as error "WARNING: {bf:TSUZUKI} (世帯主との続柄12区分) may have invalid values (Check layout sheet)"
}


capture count if SEX==.
if r(N)==_N {
    display as error "Only missing value: {bf:SEX} (男女の別)"
}
capture assert inlist(SEX, 1, 2, .)
if _rc!=0 {
    display as error "WARNING: {bf:SEX} (男女の別) may have invalid values (Check layout sheet)"
}


capture count if TSUKI4==.
if r(N)==_N {
    display as error "Only missing value: {bf:TSUKI4} (4区分)"
}
capture assert inlist(TSUKI4, 1, 2, 3, 4, .)
if _rc!=0 {
    display as error "WARNING: {bf:TSUKI4} (4区分) may have invalid values (Check layout sheet)"
}


capture count if NENREI==.
if r(N)==_N {
    display as error "Only missing value: {bf:NENREI} (各歳)"
}
capture assert inlist(NENREI, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, .)
if _rc!=0 {
    display as error "WARNING: {bf:NENREI} (各歳) may have invalid values (Check layout sheet)"
}


capture count if HAIGU==.
if r(N)==_N {
    display as error "Only missing value: {bf:HAIGU} (配偶者の有無)"
}
capture assert inlist(HAIGU, 1, 2, 3, 4, .)
if _rc!=0 {
    display as error "WARNING: {bf:HAIGU} (配偶者の有無) may have invalid values (Check layout sheet)"
}


capture count if KOKUSEKI==.
if r(N)==_N {
    display as error "Only missing value: {bf:KOKUSEKI} (日本・外国の別)"
}
capture assert inlist(KOKUSEKI, 1, 2, .)
if _rc!=0 {
    display as error "WARNING: {bf:KOKUSEKI} (日本・外国の別) may have invalid values (Check layout sheet)"
}


capture count if KYOJU6==.
if r(N)==_N {
    display as error "Only missing value: {bf:KYOJU6} (居住期間(6区分))"
}
capture assert inlist(KYOJU6, 1, 2, 3, 4, 5, 6, .)
if _rc!=0 {
    display as error "WARNING: {bf:KYOJU6} (居住期間(6区分)) may have invalid values (Check layout sheet)"
}


capture count if ZEN6A==.
if r(N)==_N {
    display as error "Only missing value: {bf:ZEN6A} (6区分)"
}
capture assert inlist(ZEN6A, 1, 2, 3, 4, 5, 6, 7, .)
if _rc!=0 {
    display as error "WARNING: {bf:ZEN6A} (6区分) may have invalid values (Check layout sheet)"
}


capture count if ZENJKEN==.
if r(N)==_N {
    display as error "Only missing value: {bf:ZENJKEN} (都道府県)"
}
capture assert inlist(ZENJKEN, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, .)
if _rc!=0 {
    display as error "WARNING: {bf:ZENJKEN} (都道府県) may have invalid values (Check layout sheet)"
}


capture count if ZENJCITY==.
if r(N)==_N {
    display as error "Only missing value: {bf:ZENJCITY} (市区町村)"
}


capture count if RODO8==.
if r(N)==_N {
    display as error "Only missing value: {bf:RODO8} (8区分)"
}
capture assert inlist(RODO8, 1, 2, 3, 4, 5, 6, 7, 8, .)
if _rc!=0 {
    display as error "WARNING: {bf:RODO8} (8区分) may have invalid values (Check layout sheet)"
}


capture count if JYU7A==.
if r(N)==_N {
    display as error "Only missing value: {bf:JYU7A} (常住地による従通7区分)"
}
capture assert inlist(JYU7A, 1, 2, 3, 4, 5, 6, 7, .)
if _rc!=0 {
    display as error "WARNING: {bf:JYU7A} (常住地による従通7区分) may have invalid values (Check layout sheet)"
}


capture count if JYUKEN==.
if r(N)==_N {
    display as error "Only missing value: {bf:JYUKEN} (都道府県)"
}
capture assert inlist(JYUKEN, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, .)
if _rc!=0 {
    display as error "WARNING: {bf:JYUKEN} (都道府県) may have invalid values (Check layout sheet)"
}


capture count if JYUCITY==.
if r(N)==_N {
    display as error "Only missing value: {bf:JYUCITY} (市区町村)"
}


capture count if CHII8==.
if r(N)==_N {
    display as error "Only missing value: {bf:CHII8} (8区分)"
}
capture assert inlist(CHII8, 1, 2, 3, 4, 5, 6, 7, 8, .)
if _rc!=0 {
    display as error "WARNING: {bf:CHII8} (8区分) may have invalid values (Check layout sheet)"
}


capture count if SAND==.
if r(N)==_N {
    display as error "Only missing value: {bf:SAND} (集計用連番)"
}
capture assert inlist(SAND, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, .)
if _rc!=0 {
    display as error "WARNING: {bf:SAND} (集計用連番) may have invalid values (Check layout sheet)"
}


capture count if SANC==.
if r(N)==_N {
    display as error "Only missing value: {bf:SANC} (中分類集計用連番)"
}
capture assert inlist(SANC, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, .)
if _rc!=0 {
    display as error "WARNING: {bf:SANC} (中分類集計用連番) may have invalid values (Check layout sheet)"
}


capture count if SANS==.
if r(N)==_N {
    display as error "Only missing value: {bf:SANS} (集計用連番)"
}
capture assert inlist(SANS, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, .)
if _rc!=0 {
    display as error "WARNING: {bf:SANS} (集計用連番) may have invalid values (Check layout sheet)"
}


capture count if SHOKD==.
if r(N)==_N {
    display as error "Only missing value: {bf:SHOKD} (集計用連番)"
}
capture assert inlist(SHOKD, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, .)
if _rc!=0 {
    display as error "WARNING: {bf:SHOKD} (集計用連番) may have invalid values (Check layout sheet)"
}


capture count if SHOKC==.
if r(N)==_N {
    display as error "Only missing value: {bf:SHOKC} (中分類集計用連番)"
}
capture assert inlist(SHOKC, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, .)
if _rc!=0 {
    display as error "WARNING: {bf:SHOKC} (中分類集計用連番) may have invalid values (Check layout sheet)"
}


capture count if SHOKS==.
if r(N)==_N {
    display as error "Only missing value: {bf:SHOKS} (集計用連番)"
}
capture assert inlist(SHOKS, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, .)
if _rc!=0 {
    display as error "WARNING: {bf:SHOKS} (集計用連番) may have invalid values (Check layout sheet)"
}


